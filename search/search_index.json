{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dawncord","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the official documentation for Dawncord, a Java library for creating Discord bots. Dawncord aims to simplify the process of developing powerful and feature-rich Discord bots using Java.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy-to-use API for handling various Discord interactions, including messages, events, and commands.</li> <li>Support for slash commands, message components (buttons, select menus), and modals.</li> <li>Flexible and extensible architecture, allowing for customization and integration with existing projects.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Dawncord, please refer to the installation and setup instructions in the Installation Guide. Once you've installed the library, head over to the Basic Usage guide to learn how to create your first Discord bot.</p> <p>If you encounter any issues or have any questions, don't hesitate to reach out to us on GitHub or Discord.</p> <p>Happy coding!</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide will walk you through the steps to install and set up Dawncord for your Discord bot development using either Maven or Gradle.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following prerequisites installed:</p> <ul> <li>Java Development Kit (JDK) version 17 or higher</li> <li>Maven (for Maven installation)</li> <li>Gradle (for Gradle installation)</li> </ul>"},{"location":"installation/#installation-with-maven","title":"Installation with Maven","text":""},{"location":"installation/#step-1-create-a-new-maven-project","title":"Step 1: Create a new Maven project","text":"<p>If you haven't already, create a new Maven project for your Discord bot:</p> <pre><code>mvn archetype:generate -DgroupId=com.example -DartifactId=bot-example -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre>"},{"location":"installation/#step-2-add-dawncord-dependency","title":"Step 2: Add Dawncord dependency","text":"<p>Add the Dawncord dependency to your Maven pom.xml file:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.github.dawncord&lt;/groupId&gt;\n    &lt;artifactId&gt;Dawncord&lt;/artifactId&gt;\n    &lt;version&gt;${dawncord.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Replace ${dawncord.version} with the latest version of Dawncord.</p>"},{"location":"installation/#step-3-build-your-project","title":"Step 3: Build your project","text":"<p>Build your Maven project to fetch the dependencies:</p> <pre><code>mvn clean install\n</code></pre>"},{"location":"installation/#installation-with-gradle","title":"Installation with Gradle","text":""},{"location":"installation/#step-1-create-a-new-gradle-project","title":"Step 1: Create a new Gradle project","text":"<p>If you haven't already, create a new Gradle project for your Discord bot:</p> <pre><code>mkdir bot-example\ncd bot-example\ngradle init --type java-application\n</code></pre>"},{"location":"installation/#step-2-add-dawncord-dependency_1","title":"Step 2: Add Dawncord dependency","text":"<p>Add the Dawncord dependency to your Gradle build.gradle file:</p> <pre><code>dependencies {\n    implementation 'io.github.dawncord:Dawncord:$dawncordVersion'\n}\n</code></pre> <p>Replace $dawncordVersion with the latest version of Dawncord.</p>"},{"location":"installation/#step-3-build-your-project_1","title":"Step 3: Build your project","text":"<p>Build your Gradle project to fetch the dependencies:</p> <pre><code>gradle build\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Once you've installed Dawncord and set up your project, you can explore the library's features and begin developing your Discord bot.</p> <p>For detailed information on all classes, methods, and configurations available in Dawncord, refer to the Javadocs.</p> <p>If you encounter any issues during the installation process, feel free to ask for help on GitHub or  Discord.</p> <p> Happy coding!"},{"location":"usage/initialize/","title":"Using Dawncord","text":"<p>This guide will show you how to use Dawncord in your Java Discord bot projects.</p>"},{"location":"usage/initialize/#adding-dawncord-to-your-project","title":"Adding Dawncord to Your Project","text":"<p>Before you can start using Dawncord, you need to add it as a dependency to your Java project. You can do this using either Maven or Gradle, as explained in the Installation Guide.</p>"},{"location":"usage/initialize/#creating-a-discord-bot","title":"Creating a Discord Bot","text":"<p>To create a Discord bot using Dawncord, follow these steps:</p>"},{"location":"usage/initialize/#initialize-your-bot","title":"Initialize Your Bot","text":"<p>Create a new Java class for your bot and define the main method:</p> <pre><code>public static void main(String[] args) {\n    Dawncord bot = new Dawncord(\"YOUR_BOT_TOKEN\");\n    bot.setIntents(GatewayIntent.MESSAGE_CONTENT, GatewayIntent.GUILD_MEMBERS);\n    bot.start();\n}\n</code></pre> <p>Replace \"YOUR_BOT_TOKEN\" with your actual Discord bot token obtained from the Discord Developer Portal.</p>"},{"location":"usage/intents/","title":"Gateway Intents in Dawncord","text":"<p>Gateway intents are a fundamental concept in Discord bot development, allowing bots to subscribe to specific types of events from Discord servers. In Dawncord, gateway intents are represented by the <code>GatewayIntent</code> enum, which provides a set of predefined intents that can be used to control the types of events your bot receives.</p>"},{"location":"usage/intents/#understanding-gateway-intents","title":"Understanding Gateway Intents","text":"<p>Gateway intents define the types of events that your bot will receive from Discord servers. By subscribing to specific intents, you can control which events your bot is notified of, enabling more efficient event handling and reducing unnecessary traffic.</p>"},{"location":"usage/intents/#available-gateway-intents","title":"Available Gateway Intents","text":"<p>The <code>GatewayIntent</code> enum provides a set of predefined intents that you can use to specify the types of events your bot is interested in. Here are some of the available gateway intents in Dawncord:</p> <ul> <li><code>GUILDS</code>: Allows access to guilds.</li> <li><code>GUILD_MEMBERS</code>: Allows access to guild members.</li> <li><code>GUILD_MESSAGES</code>: Allows access to guild messages.</li> <li><code>GUILD_MESSAGE_REACTIONS</code>: Allows access to reactions on guild messages.</li> <li><code>DIRECT_MESSAGES</code>: Allows access to direct messages.</li> <li><code>DIRECT_MESSAGE_REACTIONS</code>: Allows access to reactions on direct messages.</li> <li>And more...</li> </ul> <p>For a complete list of available gateway intents and their descriptions, refer to the <code>GatewayIntent</code> enum in the Dawncord documentation or Javadocs.</p>"},{"location":"usage/intents/#usage","title":"Usage","text":"<p>To specify which gateway intents your bot should subscribe to, you can use the <code>setIntents()</code> method provided by the <code>Dawncord</code> class. For example:</p> <p>Example</p> <pre><code>public class MyDiscordBot {\n    public static void main(String[] args) {\n        Dawncord bot = new Dawncord(\"TOKEN\");\n\n        // Subscribe to GUILD_MESSAGES and MESSAGE_CONTENT intents\n        bot.setIntents(GatewayIntent.GUILD_MESSAGES, GatewayIntent.MESSAGE_CONTENT);\n\n        bot.start();\n    }\n}\n</code></pre>"},{"location":"usage/interactions/","title":"Interactions","text":"<p>In Dawncord, you can interact with Discord through various means, including slash commands, message components, and modals. This guide will show you how to handle each type of interaction.</p>"},{"location":"usage/interactions/#slash-command-interaction","title":"Slash Command Interaction","text":"<p>Slash commands allow users to interact with your bot by typing a command prefixed with a forward slash (/) in Discord.</p>"},{"location":"usage/interactions/#registering-slash-commands","title":"Registering Slash Commands","text":"<p>To register a slash command, you can use the registerSlashCommands method of the Dawncord class. Here's how you can register a slash command named \"ping\":</p> <p>Example</p> <pre><code>// Register slash command \"ping\"\nSlashCommand command = new SlashCommandBuilder(\"ping\", \"Ping\").build();\nbot.registerSlashCommands(command);\n</code></pre>"},{"location":"usage/interactions/#using-slash-commands","title":"Using Slash Commands","text":"<p>To use slash commands in your Discord bot, you can follow this example code snippet:</p> <p>Example</p> Checking command nameWithout checking command name <pre><code>// Handling slash command events and checking command name\nbot.onSlashCommand(event -&gt; {\n    if (event.getCommandName().equals(\"test\")) {\n        event.reply(event.getGuild().getName());\n    }\n});\n</code></pre> <pre><code>// Registering a specific slash command without checking command name\nbot.onSlashCommand(\"test\", event -&gt; {\n    event.reply(event.getGuild().getName());\n});\n</code></pre> <p>In the first example, the bot checks the command name inside the onSlashCommand event handler. In the second example, the command name is directly provided in the onSlashCommand method, so the bot doesn't need to check it inside the event handler.</p>"},{"location":"usage/interactions/#handling-slash-command-options","title":"Handling Slash Command options","text":"<p>Here are two examples how to handle Slash command options in your Discord bot:</p> <p>Example</p> Using a builderSeparately <pre><code>// Creating a slash command with an option using a builder\nSlashCommand command = new SlashCommandBuilder(\"user\", \"User\")\n        .addOption(OptionType.USER, \"info\", \"User info\")\n        .build()\n</code></pre> <pre><code>// Define an option for the slash command\nOption option = new Option(OptionType.USER, \"info\", \"User info\")\n\n// Create a slash command with the defined option\nSlashCommand command = new SlashCommandBuilder(\"user\", \"User\")\n        .addOption(option)\n        .build();\n</code></pre> <p>Handling options</p> <p>Example</p> <pre><code>//Handling option\nbot.onSlashCommand(\"user\", event -&gt; {\n    event.reply(event.getOption(\"info\").getAsMention());\n});\n</code></pre>"},{"location":"usage/interactions/#subcommands","title":"Subcommands","text":"<p>Subcommands in Discord's slash commands allow you to organize related functionalities under a single parent command, streamlining command structure and enhancing user experience.</p> <p>To use subcommands in your Discord bot, you can follow this example code snippet:</p> <p>Example</p> <pre><code>// Creating a slash command with a subcommand\nSlashCommand command = new SlashCommandBuilder(\"user\", \"User\")\n        .addSubCommand(new SubCommandBuilder(\"info\", \"Info\").build())\n        .addSubCommand(new SubCommandBuilder(\"ban\", \"Ban\").build())\n        .build();\n</code></pre>"},{"location":"usage/interactions/#subcommand-groups","title":"Subcommand Groups","text":"<p>Subcommand groups in Discord's slash commands allow you to organize related subcommands under a common category. They provide a hierarchical structure for your commands, enhancing organization and clarity.</p> <p>To use subcommand groups in your Discord bot, you can follow this example code snippet:</p> <p>Example</p> <pre><code>SlashCommand command = new SlashCommandBuilder(\"user\", \"User\")\n        .addSubCommandGroup(\n            new SubCommandGroupBuilder(\"list\", \"List\")\n                .addSubCommand(\n                    new SubCommandBuilder(\"offline\", \"List offline users\").build())\n                .addSubCommand(\n                    new SubCommandBuilder(\"online\", \"List online users\").build())\n                .build())\n        .build();\n</code></pre>"},{"location":"usage/interactions/#message-component-interaction","title":"Message Component Interaction","text":"<p>Message components allow users to interact with messages by clicking buttons, selecting options from dropdown menus, etc.</p>"},{"location":"usage/interactions/#button-component","title":"Button Component","text":"<p>Button components allow users to trigger actions by clicking on buttons embedded within messages.</p> <p>To use button interactions in your Discord bot, you can follow this example code snippet:</p> <p>Example</p> <pre><code>bot.onSlashCommand(\"button\", event -&gt; {\n    event.reply(message -&gt; {\n        message.setComponents(\n            Component.actionRow(\n                Button.primary(\"button\", \"Button\")\n            )\n        );\n    });\n});\n\nbot.onButton(\"button\", event -&gt; {\n    event.reply(\"Button pressed\");\n});\n</code></pre>"},{"location":"usage/interactions/#select-menu-component","title":"Select Menu Component","text":"<p>Select menu components, also known as dropdown menus, allow users to choose from a list of options presented in a dropdown menu format.</p> <p>To use select menu interactions in your Discord bot, you can follow this example code snippet:</p> <p>Example</p> <pre><code>bot.onSlashCommand(\"selectmenu\", event -&gt; {\n    event.reply(message -&gt; {\n        message.setComponents(\n            Component.actionRow(\n                SelectMenu.create(SelectMenuType.USER, \"user-select\")\n            )\n        );\n    });\n});\n\nbot.onSelectMenu(\"user-select\", event -&gt; {\n    event.reply(\"Selected: \" + event.getValues().asMembers().get(0).getUser().getUsername());\n});\n</code></pre>"},{"location":"usage/interactions/#modal-interaction","title":"Modal Interaction","text":"<p>Modal components allow users to interact with your bot through dialog boxes or pop-up modals, enabling more complex interactions.</p> <p>To create modal, you can follow this example code snippet:</p> <p>Example</p> Using builderUsing lambda <pre><code>bot.onSlashCommand(\"modal\", event -&gt; {\n    Modal modal = new ModalBuilder(\"Submit bag\", \"submit-bag\",\n        List.of(\n            new Element(\"Title\", \"title\", TextInputStyle.SHORT),\n            new Element(\"Operating system\", \"os\", TextInputStyle.SHORT),\n            new Element(\"Browser\", \"browser\", TextInputStyle.SHORT),\n            new Element(\"Details\", \"details\", TextInputStyle.PARAGRAPH)\n        ))\n        .build();   \n\n    event.replyModal(modal);\n});\n</code></pre> <pre><code>bot.onSlashCommand(\"modal\", event -&gt; {\n    event.replyModal(modal -&gt; {\n        modal.setTitle(\"Submit Bag\");\n        modal.setCustomId(\"submit-bag\");\n        modal.setElements(\n            new Element(\"Title\", \"title\", TextInputStyle.SHORT),\n            new Element(\"Operating system\", \"os\", TextInputStyle.SHORT),\n            new Element(\"Browser\", \"browser\", TextInputStyle.SHORT),\n            new Element(\"Details\", \"details\", TextInputStyle.PARAGRAPH)\n        );\n    });\n});\n</code></pre> <p>Respond to modal</p> <p>Example</p> <pre><code>bot.onModal(\"submit-bag\", event -&gt; {\n    event.getModal().getElements().stream().map(e -&gt; e.getCustomId() + \": \" + e.getValue()).forEach(System.out::println);   \n\n    event.reply(\"Thanks for submitting!\");\n});\n</code></pre>"},{"location":"usage/lambda/","title":"Lambda Expressions in Dawncord","text":"<p>Lambda expressions are a powerful feature of Java that allow for concise and expressive syntax when working with functional interfaces. In Dawncord, lambda expressions can be used to define event handlers and callbacks, making it easy to respond to various Discord events and interactions.</p>"},{"location":"usage/lambda/#understanding-lambda-expressions","title":"Understanding Lambda Expressions","text":"<p>Lambda expressions in Java provide a way to define anonymous functions or \"closures\" inline, without the need for a separate method declaration. They are particularly useful for implementing functional interfaces, which define a single abstract method.</p> <p>In Dawncord, lambda expressions are commonly used to define event handlers for handling Discord events such as slash commands, message components, and modals. They provide a clean and readable way to specify the behavior of your bot in response to specific events.</p>"},{"location":"usage/lambda/#usage","title":"Usage","text":"<p>Lambda expressions can be used in Dawncord to define event handlers for handling Discord events such as slash commands, message components, and modals.</p>"},{"location":"usage/lambda/#example-handling-slash-commands-with-lambda-expressions","title":"Example: Handling Slash Commands with Lambda Expressions","text":"<p>Example</p> Creating role exampleCreating modal exampleHandling modal example <pre><code>// Handling slash command \"role create\" with a lambda expression\nbot.onSlashCommand(\"role create\", event -&gt; {\n    // Create a role with a lambda expression\n    event.getGuild().createRole(role -&gt; {\n        role.setName(\"Role Name\");\n        role.setColor(Color.BLACK);\n    });\n});\n</code></pre> <pre><code>// Handling slash command \"submit bag\" with a lambda expression\nbot.onSlashCommand(\"submit bag\", event -&gt; {\n    // Reply a modal with a lambda expression\n    event.replyModal(modal -&gt; {\n        modal.setTitle(\"Submit Bag\");\n        modal.setCustomId(\"submit-bag\");\n        modal.setElements(\n                new Element(\"Title\", \"title\", TextInputStyle.SHORT),\n                new Element(\"Operating system\", \"os\", TextInputStyle.SHORT),\n                new Element(\"Browser\", \"browser\", TextInputStyle.SHORT),\n                new Element(\"Details\", \"details\", TextInputStyle.PARAGRAPH)\n        );\n    });\n});\n</code></pre> <pre><code>// Handling modal events with a lambda expression\nbot.onModal(\"modal\", event -&gt; {\n    event.reply(\"Thanks for submitting!\");\n});\n</code></pre>"}]}